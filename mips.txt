0x00400000  0x3c011001  lui $1,0x00001001     5        la      $s2,        n                   # s2 = *n
0x00400004  0x3432003c  ori $18,$1,0x0000003c      
0x00400008  0x8e520000  lw $18,0x00000000($18)6        lw      $s2,        0($s2)              # s2 = n
0x0040000c  0x3c011001  lui $1,0x00001001     8        la      $s3,        A                   # s3 = *A[0]
0x00400010  0x34330000  ori $19,$1,0x00000000      
0x00400014  0x20140001  addi $20,$0,0x000000019        addi    $s4,        $0,     1           # i = 1
0x00400018  0x02b5a826  xor $21,$21,$21       10       xor     $s5,        $s5,    $s5         # soma = 0
0x0040001c  0x0c100041  jal 0x00400104        11       jal     addLoop                         # calcular soma de s3 em s5
0x00400020  0x02a08820  add $17,$21,$0        12       add     $s1,        $s5,    $0          # s1 = soma
0x00400024  0x02408020  add $16,$18,$0        13       add     $s0,        $s2,    $0          # s0 = n
0x00400028  0x0c100049  jal 0x00400124        14       jal     divider                         # calcular divisão em v1
0x0040002c  0x00605820  add $11,$3,$0         15       add     $t3,        $v1,    $0          # t3 = media A
0x00400030  0x3c011001  lui $1,0x00001001     17       la      $s3,        B                   # s3 = *B[0]
0x00400034  0x34330014  ori $19,$1,0x00000014      
0x00400038  0x20140001  addi $20,$0,0x0000000118       addi    $s4,        $0,     1           # i = 1
0x0040003c  0x02b5a826  xor $21,$21,$21       19       xor     $s5,        $s5,    $s5         # soma = 0
0x00400040  0x0c100041  jal 0x00400104        20       jal     addLoop                         # calcular soma de s3 em s5
0x00400044  0x02a08820  add $17,$21,$0        21       add     $s1,        $s5,    $0          # s1 = soma
0x00400048  0x02408020  add $16,$18,$0        22       add     $s0,        $s2,    $0          # s0 = n
0x0040004c  0x0c100049  jal 0x00400124        23       jal     divider                         # calcular divisão em v1
0x00400050  0x00606020  add $12,$3,$0         24       add     $t4,        $v1,    $0          # t4 = media B
0x00400054  0x3c011001  lui $1,0x00001001     26       la      $s3,        C                   # s3 = *C[0]
0x00400058  0x34330028  ori $19,$1,0x00000028      
0x0040005c  0x20140001  addi $20,$0,0x0000000127       addi    $s4,        $0,     1           # i = 1
0x00400060  0x02b5a826  xor $21,$21,$21       28       xor     $s5,        $s5,    $s5         # soma = 0
0x00400064  0x0c100041  jal 0x00400104        29       jal     addLoop                         # calcular soma de s3 em s5
0x00400068  0x02a08820  add $17,$21,$0        30       add     $s1,        $s5,    $0          # s1 = soma
0x0040006c  0x02408020  add $16,$18,$0        31       add     $s0,        $s2,    $0          # s0 = n
0x00400070  0x0c100049  jal 0x00400124        32       jal     divider                         # calcular divisão em v1
0x00400074  0x00606820  add $13,$3,$0         33       add     $t5,        $v1,    $0          # t5 = media C
0x00400078  0x018b082a  slt $1,$12,$11        36       blt     $t4,        $t3,    check2      # if (t4 < t3) { j check2 }
0x0040007c  0x14200001  bne $1,$0,0x00000001       
0x00400080  0x01805820  add $11,$12,$0        37       add     $t3,        $t4,    $0          # t3 = t4
0x00400084  0x01ab082a  slt $1,$13,$11        40       blt     $t5,        $t3,    readA       # if (t5 < t3) { j readA }
0x00400088  0x14200001  bne $1,$0,0x00000001       
0x0040008c  0x01a05820  add $11,$13,$0        41       add     $t3,        $t5,    $0          # t3 = t5
0x00400090  0x01ce7026  xor $14,$14,$14       44       xor     $t6,        $t6,    $t6         # k = 0
0x00400094  0x3c011001  lui $1,0x00001001     45       la      $t7,        D                   # t7 = *D[0]
0x00400098  0x342f0044  ori $15,$1,0x00000044      
0x0040009c  0x3c011001  lui $1,0x00001001     47       la      $s3,        A                   # s3 = *A[0]
0x004000a0  0x34330000  ori $19,$1,0x00000000      
0x004000a4  0x20140000  addi $20,$0,0x0000000048       addi    $s4,        $0,     0           # i = 1
0x004000a8  0x0c100036  jal 0x004000d8        49       jal     subrotina                       # subrotina para A
0x004000ac  0x3c011001  lui $1,0x00001001     52       la      $s3,        B                   # s3 = *A[0]
0x004000b0  0x34330014  ori $19,$1,0x00000014      
0x004000b4  0x20140000  addi $20,$0,0x0000000053       addi    $s4,        $0,     0           # i = 1
0x004000b8  0x0c100036  jal 0x004000d8        54       jal     subrotina                       # subrotina para B
0x004000bc  0x3c011001  lui $1,0x00001001     57       la      $s3,        C                   # s3 = *A[0]
0x004000c0  0x34330028  ori $19,$1,0x00000028      
0x004000c4  0x20140000  addi $20,$0,0x0000000058       addi    $s4,        $0,     0           # i = 1
0x004000c8  0x0c100036  jal 0x004000d8        59       jal     subrotina                       # subrotina para C
0x004000cc  0x3c011001  lui $1,0x00001001     62       sw      $t6,        k                   # k = t6
0x004000d0  0xac2e0040  sw $14,0x00000040($1)      
0x004000d4  0x08100035  j 0x004000d4          64   end: j end
0x004000d8  0x8e680000  lw $8,0x00000000($19) 71       lw      $t0,        0($s3)              # le da memoria vetor[i]
0x004000dc  0x010b082a  slt $1,$8,$11         72       blt     $t0,        $t3,    srjump      # if (vetor[i] < maior media) { j srjump }
0x004000e0  0x14200003  bne $1,$0,0x00000003       
0x004000e4  0xade80000  sw $8,0x00000000($15) 73       sw      $t0,        0($t7)              # d[k] = vetor[i]
0x004000e8  0x21ce0001  addi $14,$14,0x000000074       addi    $t6,        $t6,    1           # k++
0x004000ec  0x21ef0004  addi $15,$15,0x000000075       addi    $t7,        $t7,    4           # t7 = *vetor[i]
0x004000f0  0x22940001  addi $20,$20,0x000000078       addi    $s4,        $s4,    1           # i++
0x004000f4  0x22730004  addi $19,$19,0x000000079       addi    $s3,        $s3,    4           # s3 = *vetor[k]
0x004000f8  0x0292082a  slt $1,$20,$18        80       blt     $s4,        $s2,    subrotina   # if (i < n) { i++ }
0x004000fc  0x1420fff6  bne $1,$0,0xfffffff6       
0x00400100  0x03e00008  jr $31                81       jr      $ra                             # else { encerra a funcao }
0x00400104  0x8e680000  lw $8,0x00000000($19) 88       lw      $t0,        0($s3)              # le da memoria vetor[i]
0x00400108  0x02a8a820  add $21,$21,$8        89       add     $s5,        $s5,    $t0         # soma += vetor[i]
0x0040010c  0x0292082a  slt $1,$20,$18        90       blt     $s4,        $s2,    increment   # if (i < n) { i++ }
0x00400110  0x14200001  bne $1,$0,0x00000001       
0x00400114  0x03e00008  jr $31                91       jr      $ra                             # else { encerra a funcao }
0x00400118  0x22940001  addi $20,$20,0x000000094       addi    $s4,        $s4,    1           # i++
0x0040011c  0x22730004  addi $19,$19,0x000000095       addi    $s3,        $s3,    4           # *vetor[i] += 4
0x00400120  0x08100041  j 0x00400104          96       j       addLoop                         # jump to mloop
0x00400124  0x3c088000  lui $8,0x00008000     102      lui     $t0,        0x8000              # mascara para isolar bit mais significativo
0x00400128  0x24090020  addiu $9,$0,0x00000020103      li      $t1,        32                  # contador de iterações
0x0040012c  0x00421026  xor $2,$2,$2          105      xor     $v0,        $v0,    $v0         # registrador P($v0)-A($v1) com  0 e o dividendo
0x00400130  0x02201820  add $3,$17,$0         106      add     $v1,        $s1,    $0
0x00400134  0x00685024  and $10,$3,$8         109      and     $t2,        $v1,    $t0         # isola em t2 o bit mais significativo do registador 'A' ($v1)
0x00400138  0x00021040  sll $2,$2,0x00000001  110      sll     $v0,        $v0,    1           # desloca o registrado P-A
0x0040013c  0x00031840  sll $3,$3,0x00000001  111      sll     $v1,        $v1,    1
0x00400140  0x11400001  beq $10,$0,0x00000001 113      beq     $t2,        $0,     di1
0x00400144  0x34420001  ori $2,$2,0x00000001  114      ori     $v0,        $v0,    1           # coloca 1 no bit menos significativo do registador 'P'($v0)
0x00400148  0x00505022  sub $10,$2,$16        117      sub     $t2,        $v0,    $s0         # subtrai 'P'($v0) do divisor ($s0)
0x0040014c  0x0140082a  slt $1,$10,$0         118      blt     $t2,        $0,     di2
0x00400150  0x14200002  bne $1,$0,0x00000002       
0x00400154  0x01401020  add $2,$10,$0         119      add     $v0,        $t2,    $0          # se a subtração deu positiva, 'P'($v0) recebe o valor da subtração
0x00400158  0x34630001  ori $3,$3,0x00000001  120      ori     $v1,        $v1,    1           # e 'A'($v1) recebe 1 no bit menos significativo
0x0040015c  0x2129ffff  addi $9,$9,0xffffffff 123      addi    $t1,        $t1,    -1          # decrementa o número de iterações
0x00400160  0x1520fff4  bne $9,$0,0xfffffff4  124      bne     $t1,        $0,     dloop
0x00400164  0x03e00008  jr $31                126      jr      $ra

0x10010000    0x000002c6 0x000000c8 0x00000226 0x00000186 0x000002bc 0x00000258 0x000001bc 0x00000320 
0x10010020    0x0000007b 0x0000038e 0x0000015b 0x0000012c 0x000002c6 0x000000be 0x00000262 0x00000005 
0x10010040    0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 0x00000000 